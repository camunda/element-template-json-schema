{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "http://camunda.org/schema/cloud-element-templates/1.0",
  "title": "Cloud Element Template Schema",
  "description": "A single element template configuration or an array of element template configurations",
  "definitions": {
    "properties": {
      "allOf": [
        {
          "type": "array",
          "title": "element template properties",
          "description": "The properties of the element template",
          "default": [],
          "items": {
            "type": "object",
            "title": "element template property",
            "description": "A property defined for the element template",
            "default": {},
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "Dropdown"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "then": {
                  "required": [
                    "choices"
                  ],
                  "errorMessage": "must provide choices=[] with \"Dropdown\" type"
                }
              }
            ],
            "properties": {
              "value": {
                "$id": "#/properties/property/value",
                "type": [
                  "string",
                  "boolean"
                ],
                "title": "property value",
                "description": "The value of the control field for the property"
              },
              "description": {
                "$id": "#/properties/property/description",
                "type": "string",
                "title": "property description",
                "description": "The description of the control field"
              },
              "label": {
                "$id": "#/properties/property/label",
                "type": "string",
                "title": "property label",
                "description": "The label of the control field for the property"
              },
              "type": {
                "$id": "#/properties/property/type",
                "type": "string",
                "title": "property type",
                "description": "The type of the control field"
              },
              "editable": {
                "$id": "#/properties/property/editable",
                "type": "boolean",
                "title": "property editable",
                "description": "Indicates whether the property is editable or not"
              },
              "choices": {
                "$id": "#/properties/property/choices",
                "type": "array",
                "title": "property choices",
                "description": "The choices for dropdown properties",
                "items": {
                  "$id": "#/properties/property/choices/item",
                  "type": "object",
                  "properties": {
                    "name": {
                      "$id": "#/properties/property/choices/item/name",
                      "type": "string",
                      "title": "choice name",
                      "description": "The name of the choice"
                    },
                    "value": {
                      "$id": "#/properties/property/choices/item/value",
                      "type": "string",
                      "title": "choice value",
                      "description": "The value of the choice"
                    }
                  },
                  "required": [
                    "value",
                    "name"
                  ],
                  "errorMessage": "{ name, value } must be specified for \"Dropdown\" choices"
                }
              },
              "constraints": {
                "$id": "#/properties/property/constraints",
                "type": "object",
                "title": "property constraints",
                "description": "The validation constraints",
                "properties": {
                  "notEmpty": {
                    "$id": "#/properties/property/constraints/notEmpty",
                    "type": "boolean",
                    "title": "property constraints not empty",
                    "description": "The control field must not be empty"
                  },
                  "minLength": {
                    "$id": "#/properties/property/constraints/minLength",
                    "type": "number",
                    "title": "property constraints min length",
                    "description": "The minimal length for the control field value"
                  },
                  "maxLength": {
                    "$id": "#/properties/property/constraints/maxLength",
                    "type": "number",
                    "title": "property constraints max length",
                    "description": "The maximal length for the control field value"
                  },
                  "pattern": {
                    "$id": "#/properties/property/constraints/pattern",
                    "title": "property constraints pattern",
                    "description": "A regular expression pattern for the constraints",
                    "oneOf": [
                      {
                        "type": "object",
                        "properties": {
                          "value": {
                            "$id": "#/properties/property/constraints/pattern/value",
                            "type": "string",
                            "title": "property constraints pattern value",
                            "description": "The regular expression of the pattern constraint"
                          },
                          "message": {
                            "$id": "#/properties/property/constraints/pattern/message",
                            "type": "string",
                            "title": "property constraints pattern message",
                            "description": "The validation message of the pattern constraint"
                          }
                        }
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "group": {
                "$id": "#/properties/property/group",
                "type": "string",
                "title": "property group",
                "description": "The custom group of the control field for the property"
              }
            }
          }
        },
        {
          "$schema": "http://json-schema.org/draft-07/schema",
          "type": "array",
          "title": "element template properties",
          "description": "The properties of the element template",
          "default": [],
          "items": {
            "type": "object",
            "title": "element template property",
            "description": "A property defined for the element template",
            "default": {},
            "required": [
              "binding"
            ],
            "errorMessage": {
              "required": {
                "binding": "missing binding for property \"${0#}\""
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "binding": {
                      "properties": {
                        "type": {
                          "const": "property"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "binding"
                  ]
                },
                "then": {
                  "properties": {
                    "type": {
                      "enum": [
                        "String",
                        "Text",
                        "Hidden",
                        "Dropdown",
                        "Boolean"
                      ],
                      "errorMessage": "invalid property type ${0} for binding type \"property\"; must be any of { String, Text, Hidden, Dropdown, Boolean }"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "binding": {
                      "properties": {
                        "type": {
                          "enum": [
                            "zeebe:input",
                            "zeebe:output",
                            "zeebe:taskHeader",
                            "zeebe:taskDefinition:type"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "binding"
                  ]
                },
                "then": {
                  "properties": {
                    "type": {
                      "enum": [
                        "String",
                        "Text",
                        "Hidden",
                        "Dropdown"
                      ],
                      "errorMessage": "invalid property type ${0} for binding type ${1/binding/type}; must be any of { String, Text, Hidden, Dropdown }"
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "optional": {
                      "const": true
                    }
                  },
                  "required": [
                    "optional"
                  ]
                },
                "then": {
                  "properties": {
                    "binding": {
                      "properties": {
                        "type": {
                          "enum": [
                            "zeebe:input",
                            "zeebe:output"
                          ],
                          "errorMessage": "optional is not supported for binding type ${0}; must be any of { zeebe:input, zeebe:output }"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "optional": {
                      "const": true
                    }
                  },
                  "required": [
                    "optional"
                  ]
                },
                "then": {
                  "properties": {
                    "constraints": {
                      "properties": {
                        "notEmpty": {
                          "const": false,
                          "errorMessage": "optional is not allowed for truthy \"notEmpty\" constraint"
                        }
                      },
                      "required": [
                        "notEmpty"
                      ]
                    }
                  }
                }
              }
            ],
            "properties": {
              "binding": {
                "$id": "#/properties/property/binding",
                "type": "object",
                "title": "property binding",
                "description": "A binding to a BPMN 2.0 property",
                "required": [
                  "type"
                ],
                "allOf": [
                  {
                    "if": {
                      "properties": {
                        "type": {
                          "enum": [
                            "property",
                            "zeebe:input"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "then": {
                      "required": [
                        "name"
                      ],
                      "errorMessage": "property.binding ${0/type} requires name"
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "type": {
                          "const": "zeebe:output"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "then": {
                      "required": [
                        "source"
                      ],
                      "errorMessage": "property.binding ${0/type} requires source"
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "type": {
                          "const": "zeebe:taskHeader"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "then": {
                      "required": [
                        "key"
                      ],
                      "errorMessage": "property.binding ${0/type} requires key"
                    }
                  }
                ],
                "properties": {
                  "type": {
                    "$id": "#/properties/property/binding/type",
                    "type": "string",
                    "title": "property binding type",
                    "enum": [
                      "property",
                      "zeebe:taskDefinition:type",
                      "zeebe:input",
                      "zeebe:output",
                      "zeebe:taskHeader"
                    ],
                    "errorMessage": "invalid property.binding type ${0}; must be any of { property, zeebe:taskDefinition:type, zeebe:input, zeebe:output, zeebe:taskHeader }",
                    "description": "The type of the property binding"
                  },
                  "name": {
                    "$id": "#/properties/property/binding/name",
                    "type": "string",
                    "title": "property binding name",
                    "description": "The name of binding xml property"
                  },
                  "source": {
                    "$id": "#/properties/property/binding/source",
                    "type": "string",
                    "title": "property binding source",
                    "description": "The source value of a property binding (zeebe:output)"
                  },
                  "key": {
                    "$id": "#/properties/property/binding/key",
                    "type": "string",
                    "title": "property binding key",
                    "description": "The key value of a property binding (zeebe:taskHeader)"
                  }
                }
              },
              "optional": {
                "$id": "#/optional",
                "type": "boolean",
                "title": "element template optional",
                "description": "Indicates whether a property is optional"
              }
            }
          }
        }
      ]
    },
    "template": {
      "type": "object",
      "allOf": [
        {
          "required": [
            "name",
            "id",
            "appliesTo",
            "properties"
          ],
          "properties": {
            "name": {
              "$id": "#/name",
              "type": "string",
              "title": "element template name",
              "description": "The name of the element template"
            },
            "id": {
              "$id": "#/id",
              "type": "string",
              "title": "element template id",
              "description": "The identifier of the element template"
            },
            "description": {
              "$id": "#/description",
              "type": "string",
              "title": "element template description",
              "description": "The description of the element template"
            },
            "version": {
              "$id": "#/version",
              "type": "number",
              "title": "element template version",
              "description": "The version of the element template"
            },
            "isDefault": {
              "$id": "#/isDefault",
              "type": "boolean",
              "title": "element template is default",
              "description": "Indicates whether the element template is a default template"
            },
            "appliesTo": {
              "$id": "#/appliesTo",
              "type": "array",
              "title": "element template applies to",
              "description": "The definition for which element types the element template can be applied",
              "default": [],
              "items": {
                "$id": "#/appliesTo/items",
                "type": "string",
                "pattern": "^(.*?:)",
                "errorMessage": {
                  "pattern": "invalid item for \"appliesTo\", should contain namespaced property, example: \"bpmn:Task\""
                }
              }
            },
            "metadata": {
              "$id": "#/metadata",
              "type": "object",
              "title": "element template metadata",
              "description": "Some metadata for further configuration"
            },
            "entriesVisible": {
              "$id": "#/entriesVisible",
              "type": "boolean",
              "title": "element template entries visible",
              "description": "Select whether non-template entries are visible in the properties panel"
            },
            "groups": {
              "$id": "#/groups",
              "type": "array",
              "title": "element template properties groups",
              "description": "The custom defined groups of the element template",
              "default": [],
              "items": {
                "$id": "#/groups/group",
                "type": "object",
                "title": "element template group",
                "description": "A custom defined group for the element template",
                "default": {},
                "required": [
                  "id",
                  "label"
                ],
                "errorMessage": {
                  "required": {
                    "id": "missing id for group \"${0#}\"",
                    "label": "missing label for group \"${0#}\""
                  }
                },
                "properties": {
                  "id": {
                    "$id": "#/groups/group/id",
                    "type": "string",
                    "title": "group id",
                    "description": "The id of the custom group"
                  },
                  "label": {
                    "$id": "#/groups/group/label",
                    "type": "string",
                    "title": "group label",
                    "description": "The label of the custom group"
                  }
                }
              }
            }
          },
          "errorMessage": {
            "required": {
              "name": "missing template name",
              "id": "missing template id",
              "appliesTo": "missing appliesTo=[]",
              "properties": "missing properties=[]"
            }
          }
        }
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/properties",
          "$id": "#/properties"
        }
      }
    }
  },
  "oneOf": [
    {
      "$ref": "#/definitions/template"
    },
    {
      "type": "array",
      "items": {
        "$ref": "#/definitions/template"
      }
    }
  ]
}